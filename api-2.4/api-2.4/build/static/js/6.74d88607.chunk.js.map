{"version":3,"sources":["assets/notification.mp3","utils/blob.js","utils/encryption.js","utils/Socket.js","pages/Chat.js"],"names":["b64toBlob","b64Data","contentType","sliceSize","byteCharacters","atob","btoa","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","blob","Blob","type","crypt","encryptMessage","messageToencrypt","secretkey","encryptedMessage","CryptoJS","AES","encrypt","toString","decryptMessage","decryptedBytes","decrypt","decryptedMessage","enc","Utf8","err","console","log","socket","io","process","REACT_APP_API","ss","require","Chat","themeSetting","history","useHistory","divRef","useRef","hiddenFileInput","React","useState","userCount","setUserCount","Audio","notificationSound","notification","useContext","Context","state","dispatch","message","setMessage","messageIcon","setMessageIcon","showEmojiPicker","setShowEmojiPicker","fileSelected","setFileSelected","file","setFile","fileObject","setFileObject","received","setReceived","joinedSent","setJoinedSent","disabled","setDisabled","showDialog","setShowDialog","close","showDialogTL","setShowDialogTL","joinHandler","msg","decryptedUsername","user_name","key","messages","ref","class","Date","toLocaleString","title","document","hasFocus","play","current","scrollIntoView","behavior","userCountHandler","count","leaveHandler","messageHandler","receivedHMAC","hmac","calculatedHMAC","HmacSHA256","fileHandler","data","decryptedName","name","decryptedMIME","onClick","handlePreviewClick","id","alt","style","display","controls","encryptedData","decryptedData","fileName","a","createElement","body","appendChild","url","window","URL","createObjectURL","href","download","click","revokeObjectURL","saveBlob","handleDecryptClick","onbeforeunload","event","preventDefault","emit","roomName","username","useEffect","volume","SHA512","payload","on","off","fileElement","getElementById","cssText","src","objectURL","broadcastLeave","changeTheme","theme","documentElement","setAttribute","socketEmit","handleSend","reader","FileReader","readAsDataURL","onload","result","replace","encodedData","split","encryptedUsername","encryptedName","encryptedMIME","stream","createStream","finished","Fragment","Helmet","rel","navigator","clipboard","isSecureContext","writeText","textArea","value","position","focus","select","execCommand","toastr","removeChild","x","className","setTimeout","icon","faCopy","faUsers","innerWidth","onEmojiClick","e","emojiObject","concat","emoji","faPaperclip","faTimes","placeholder","onChange","target","onKeyDown","keyCode","binaryData","files","thisFile","sizeMB","size","REACT_APP_SIZE_LIMIT","toFixed","faLaugh","disableAutoFocus","native","oppositeTheme","location","reload","backgroundColor","modalColor","minWidth","width","padding","textAlign","borderRadius","isOpen","faFileExport"],"mappings":"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","file":"static/js/6.74d88607.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/notification.e54748d9.mp3\";","export const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {\n    // Converts base64 encoded data into a blob.\n\n    // Decode base64 data\n    const byteCharacters = atob(btoa(b64Data));\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n        const byteNumbers = new Array(slice.length);\n        for (let i = 0; i < slice.length; i++) {\n            byteNumbers[i] = slice.charCodeAt(i);\n        }\n\n        const byteArray = new Uint8Array(byteNumbers);\n        byteArrays.push(byteArray);\n    }\n\n    // Create a blob and return it\n    const blob = new Blob(byteArrays, {type: contentType});\n    return blob;\n}\n\nexport function saveBlob(blob, fileName) {\n    // Saves a blob to disk.\n\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n\n    var url = window.URL.createObjectURL(blob);\n    // console.log(url);\n    a.href = url;\n    a.download = fileName;\n    a.click();\n    window.URL.revokeObjectURL(url);\n};\n\nexport function retrieveB64FromBlob(encodedBlobData) {\n    // Splits the blob and returns only the base64 encoded data.\n\n    var array = encodedBlobData.toString().split(\",\");\n    return array[1]\n}\n","import CryptoJS from 'crypto-js';\n//https://www.npmjs.com/package/crypto-js\n\n\nexport const crypt = (function () {\n    // Encrypts and decrypts data using CryptoJS in password mode.\n\n    return {\n        encryptMessage: function (messageToencrypt = '', secretkey = '') {\n            var encryptedMessage = CryptoJS.AES.encrypt(messageToencrypt, secretkey);\n            return encryptedMessage.toString();\n        },\n        decryptMessage: function (encryptedMessage = '', secretkey = '') {\n            try {\n                var decryptedBytes = CryptoJS.AES.decrypt(encryptedMessage, secretkey);\n                var decryptedMessage = decryptedBytes.toString(CryptoJS.enc.Utf8);\n                return decryptedMessage;\n            } catch (err) {\n                console.log(\"Malformed UTF-8 Data.\")\n                return '';\n            }\n        }\n    };\n})();\n","import io from \"socket.io-client\";\n\nexport var socket = io(process.env.REACT_APP_API); // Initiate the socket connection to the API","import React, {useContext, useEffect, useRef} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {useHistory} from 'react-router-dom';\nimport {Context} from '../Components/Store';\nimport notificationSound from '../assets/notification.mp3';\nimport Picker from 'emoji-picker-react';\n\n// ReachUI\n\nimport {Dialog} from \"@reach/dialog\";\nimport \"@reach/dialog/styles.css\"\n\n// Crypto JS\nimport CryptoJS from 'crypto-js';\n\n// Icons\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faPaperclip, faTimes, faLaugh, faPaperPlane, faUsers, faCopy} from '@fortawesome/free-solid-svg-icons'\nimport {faFileExport} from '@fortawesome/free-solid-svg-icons'\n\n// Util Imports\n\nimport {b64toBlob, saveBlob, retrieveB64FromBlob} from '../utils/blob';\nimport {crypt} from '../utils/encryption.js';\nimport * as toastr from 'toastr';\n\n// Socket.IO\nimport {socket} from \"../utils/Socket\";\n\nconst ss = require('socket.io-stream')\n\n\n\n// Code\nconst Chat = () => {\n    const history = useHistory();\n    const divRef = useRef(null);\n    const hiddenFileInput = React.useRef(null);\n//The useRef is a hook that allows to directly create a reference to the DOM element in the functional component\n    // State Varibles\n    const [userCount, setUserCount] = React.useState(null)\n\n    const [notification] = React.useState(new Audio(notificationSound));\n\n    const [state, dispatch] = useContext(Context);\n\n    const [message, setMessage] = React.useState('');\n    const [messageIcon, setMessageIcon] = React.useState('faPaperclip');\n\n    const [showEmojiPicker, setShowEmojiPicker] = React.useState(false);\n\n    const [fileSelected, setFileSelected] = React.useState(false);\n    const [file, setFile] = React.useState('');\n    const [fileObject, setFileObject] = React.useState(null);\n\n    const [received, setReceived] = React.useState([]);\n    const [joinedSent, setJoinedSent] = React.useState(false);\n    const [disabled, setDisabled] = React.useState(false);\n    var themeSetting;\n\n    const [showDialog, setShowDialog] = React.useState(false);\n    const open = () => setShowDialog(true);\n    const close = () => setShowDialog(false);\n\n    const [showDialogTL, setShowDialogTL] = React.useState(false);\n    const openTL = () => setShowDialogTL(true);\n    const closeTL = () => setShowDialogTL(false);\n\n    // Before the tab closes:\n    window.onbeforeunload = (event) => {\n        const e = event || window.event;\n        // Cancel the event\n        e.preventDefault();\n        console.log(\"[Tab] Close attempt detected.\")\n        console.log(\"[Tab] Broadcasting leave.\");\n        // broadcastLeave();\n        socket.emit('leave', {\n            \"roomName\": state.roomName,\n            \"user_name\": crypt.encryptMessage(state.username, state.key)\n        });\n    };\n\n    useEffect(() => {\n        if (state.key === null || state.username === null) {\n            // If the key or username doesn't exist in the parent state, go to the splash screen.\n            history.push('/');\n            return;\n        }\n\n        notification.volume = 0.5;\n\n        // Hash the room key with SHA-512\n        var roomName = CryptoJS.SHA512(state.key).toString();\n        //console.log(\"AAAAAAAA\" + roomName);\n        // Set the room name as the hashed key\n        dispatch({type: 'SET_ROOM', payload: roomName});\n\n        if (joinedSent === false) {\n            // If the join message hasn't been sent, do it.\n            // socket = io(process.env.REACT_APP_API); // Initiate the socket connection to the API\n            socket.emit('join', {\n                \"roomName\": roomName,\n                \"user_name\": crypt.encryptMessage(state.username, state.key)\n            }); // Emit the join event\n            setJoinedSent(true); // Don't send the event again\n        }\n    }, [state.roomName])\n\n    useEffect(() => {\n        try {\n            // Subscribe to socket events\n            socket.on('chat response', messageHandler);\n            socket.on('file response', fileHandler);\n            socket.on('join response', joinHandler);\n            socket.on('leave response', leaveHandler);\n            socket.on('user count', userCountHandler);\n        } catch (err) {\n            // If there's an error, cancel.\n            history.push('/');\n            return;\n        }\n        return() => {\n            // Unsubscribe to responses\n            socket.off('chat response');\n            socket.off('file response');\n            socket.off('join response')\n            socket.off('leave response');\n            socket.off('user count');\n        }\n    }, []);\n\n    //CALLED WHEN SOMEONE JOINS THE ROOM\n    function joinHandler(msg) {\n        // Handles join responses\n        var decryptedUsername = crypt.decryptMessage(msg.user_name, state.key); // Decrypt the username\n        if (decryptedUsername !== '') { // if the username and message are empty values, stop\n            console.log(msg); // for debugging: print the encrypted contents of the response\n            setReceived((messages) => [// Display\n                ...messages,\n                <div ref={divRef}>\n                    <p>\n                        <p class=\"dateTime\">{new Date().toLocaleString()}</p>\n                        <b title={new Date().toLocaleString()}> {decryptedUsername} has joined the room.</b></p>\n                </div>\n            ]);\n            if (document.hasFocus() === false) {notification.play()};\n            try {\n                // Scroll down\n                divRef.current.scrollIntoView({behavior: 'smooth'});\n            } catch(err) {\n                return;\n            }\n        } else {\n            console.log(`Not my message: ${msg}`)\n        }\n    }\n\n    function userCountHandler(msg) {\n        // Handles user count responses\n        setUserCount(msg.count);\n    }\n\n    function leaveHandler(msg) {\n        // Handles leave responses\n        var decryptedUsername = crypt.decryptMessage(msg.user_name, state.key); // Decrypt the username\n        if (decryptedUsername !== '') { // if the username and message are empty values, stop\n            console.log(msg); // for debugging: print the encrypted contents of the response\n            setReceived((messages) => [// Display\n                ...messages,\n                <div ref={divRef}>\n                    <p>\n                        <p class=\"dateTime\">{new Date().toLocaleString()}</p>\n                        <b title={new Date().toLocaleString()}> {decryptedUsername} has left the room.</b></p>\n                </div>\n            ]);\n            if (document.hasFocus() === false) {notification.play()};\n            try {\n                // Scroll down\n                divRef.current.scrollIntoView({behavior: 'smooth'});\n            } catch(err) {\n                return;\n            }\n        } else {\n            console.log(`Not my message: ${msg}`)\n        }\n    }\n\n    function messageHandler(msg) {\n        // Handles incoming message responses\n        var receivedHMAC = msg.hmac;\n        var calculatedHMAC = CryptoJS.HmacSHA256(msg.message, state.key).toString();\n        if (receivedHMAC !== calculatedHMAC) {\n            setReceived((messages) => [// Display a decryption error\n                ...messages,\n                <div ref={divRef}>\n                    <p>\n                        <b>[DECRYPTION ERROR]</b>: [DECRYPTION ERROR]</p>\n                </div>\n            ]);\n            console.log(`Unable to verify authenticity.\\nReceived HMAC: ${receivedHMAC}\\nCalculated HMAC: ${calculatedHMAC}\\nReceived message:`);\n            console.log(msg);\n            return;\n        }\n        var decryptedUsername = crypt.decryptMessage(msg.user_name, state.key); // Decrypt the username\n        var decryptedMessage = crypt.decryptMessage(msg.message, state.key); // Decrypt the message\n        if (decryptedUsername !== '' || decryptedMessage !== '') { // if the username and message are empty values, stop\n            console.log(msg); // for debugging: print the encrypted contents of the response\n            setReceived((messages) => [// Display\n                ...messages,\n                <div ref={divRef}>\n                    <p>\n                        <p class=\"dateTime\">{new Date().toLocaleString()}</p>\n                        <b title={new Date().toLocaleString()}> {decryptedUsername}</b>: {decryptedMessage}</p>\n                </div>\n            ]);\n            try {\n                // Scroll down\n                divRef.current.scrollIntoView({behavior: 'smooth'});\n            } catch(err) {\n                return;\n            }\n        } else {\n            setReceived((messages) => [// Display a decryption error\n                ...messages,\n                <div ref={divRef}>\n                    <p>\n                        <b>[DECRYPTION ERROR]</b>: [DECRYPTION ERROR]</p>\n                </div>\n            ]);\n            console.log(`Not my message: ${msg}`)\n        }\n        if (document.hasFocus() === false) {notification.play()};\n    }\n\n    function fileHandler(msg) {\n        // Handles incoming file responses\n        console.log(msg); // Print file response for debugging\n\n        console.log(\"[File Handler] file received\");\n\n        var receivedHMAC = msg.hmac;\n        var calculatedHMAC = CryptoJS.HmacSHA256(msg.data, state.key).toString();\n\n        if (receivedHMAC !== calculatedHMAC) {\n            setReceived((messages) => [// Display a decryption error\n                ...messages,\n                <div ref={divRef}>\n                    <p>\n                        <b>[DECRYPTION ERROR]</b>: [DECRYPTION ERROR]</p>\n                </div>\n            ]);\n            console.log(`Unable to verify authenticity.\\nReceived HMAC: ${receivedHMAC}\\nCalculated HMAC: ${calculatedHMAC}\\nReceived message:`);\n            console.log(msg);\n            return;\n        }\n\n        var decryptedUsername = crypt.decryptMessage(msg.user_name, state.key); // Decrypt the username\n        var decryptedName = crypt.decryptMessage(msg.name, state.key); // Decrypt the file name\n        var decryptedMIME = crypt.decryptMessage(msg.type, state.key); // Decrypt the MIME type\n\n        if (decryptedUsername !== '') { // if the username is an empty value, stop\n            switch(decryptedMIME) {\n                case 'image/jpeg':\n                case 'image/gif':\n                case 'image/png':\n                    setReceived((messages) => [// Display\n                        ...messages,\n                        <div ref={divRef}>\n                            <p>\n                                <p class=\"dateTime\">{new Date().toLocaleString()}</p>\n                                <b title={new Date().toLocaleString()}> {decryptedUsername} sent an image</b>.\n                                <span class=\"decrypt\"\n                                    onClick={\n                                        () => {\n                                            // Pass the encrypted file data, decrypted name and decrypted MIME\n                                            // to the file decryption\n                                            handlePreviewClick(msg.data, decryptedName, decryptedMIME)\n                                        }\n                                }> Click to preview {decryptedName}.</span>\n                                <img id={decryptedName} class=\"previewedImage\" alt={decryptedName} style={{display: 'none'}}></img>\n                            </p>\n                        </div>\n                    ]);\n                    return;\n                case 'audio/mpeg':\n                case 'audio/wav':\n                case 'audio/flac':\n                    setReceived((messages) => [// Display\n                        ...messages,\n                        <div ref={divRef}>\n                            <p>\n                                <p class=\"dateTime\">{new Date().toLocaleString()}</p>\n                                <b> {decryptedUsername} sent an audio file</b>.\n                                <span class=\"decrypt\"\n                                    onClick={\n                                        () => {\n                                            // Pass the encrypted file data, decrypted name and decrypted MIME\n                                            // to the file decryption\n                                            handlePreviewClick(msg.data, decryptedName, decryptedMIME)\n                                        }\n                                }> Click to preview {decryptedName}.</span>\n                                <br></br>\n                                <audio class=\"previewedImage\" id={decryptedName} controls style={{display: 'none'}}/>\n                            </p>\n                        </div>\n                    ]);\n                    return;\n                case 'video/mp4':\n                    setReceived((messages) => [// Display\n                        ...messages,\n                        <div ref={divRef}>\n                            <p>\n                                <p class=\"dateTime\">{new Date().toLocaleString()}</p>\n                                <b> {decryptedUsername} sent a video</b>.\n                                <span class=\"decrypt\"\n                                    onClick={\n                                        () => {\n                                            // Pass the encrypted file data, decrypted name and decrypted MIME\n                                            // to the file decryption\n                                            handlePreviewClick(msg.data, decryptedName, decryptedMIME)\n                                        }\n                                }> Click to preview {decryptedName}.</span>\n                                <br></br>\n                                <video class=\"previewedImage\" id={decryptedName} controls style={{display: 'none'}}/>\n                            </p>\n                        </div>\n                    ]);\n                    return;\n                default:\n                    setReceived((messages) => [// Display\n                        ...messages,\n                        <div ref={divRef}>\n                            <p>\n                                <p class=\"dateTime\">{new Date().toLocaleString()}</p>\n                                <b> {decryptedUsername} sent an attachment</b>.\n                                <span class=\"decrypt\"\n                                    onClick={\n                                        () => {\n                                            // Pass the encrypted file data, decrypted name and decrypted MIME\n                                            // to the file decryption/save function\n                                            handleDecryptClick(msg.data, decryptedName, decryptedMIME)\n                                        }\n                                }> Click to decrypt {decryptedName}.</span>\n                            </p>\n                        </div>\n                    ]);\n                }\n            }\n\n            if (document.hasFocus() === false) {notification.play()};\n\n            try {\n                // Scroll down\n                divRef.current.scrollIntoView({behavior: 'smooth'});\n            } catch(err) {\n                return;\n            }\n    }\n\n    function handleDecryptClick(encryptedData, decryptedName, decryptedMIME) {\n        // Handles decryption and saving\n        const decryptedData = crypt.decryptMessage(encryptedData, state.key); // Decrypt file data\n        console.log(`[Decrypt Button] Decrypted Data.\\n[DecryptButton] Converting base64 to ${decryptedMIME} blob.`)\n        const blob = b64toBlob(atob(decryptedData), decryptedMIME); // Decode base64 and create blob\n        console.log(\"[Decrypt Button] Blob created.\");\n        console.log(blob); // Print blob for debugging\n        saveBlob(blob, decryptedName); // Save blob Basically Creates a link for our file through which user downloads\n    }\n\n    const handlePreviewClick = (encryptedData, decryptedName, decryptedMIME) => {\n        const fileElement = document.getElementById(decryptedName);\n        if (fileElement.style.cssText === \"display: inline-block;\") {\n            fileElement.style = \"display: none;\"\n            return;\n        }\n\n        if (fileElement.src === \"\") {\n            const decryptedData = crypt.decryptMessage(encryptedData, state.key); // Decrypt file data\n            console.log(`[Decrypt Button] Decrypted Data.\\n[DecryptButton] Converting base64 to ${decryptedMIME} blob.`)\n            const blob = b64toBlob(atob(decryptedData), decryptedMIME); // Decode base64 and create blob\n            var objectURL = URL.createObjectURL(blob);\n            document.getElementById(decryptedName).src = objectURL;\n        }\n\n        document.getElementById(decryptedName).style = 'display: inline-block;';\n    }\n\n    function broadcastLeave() {\n        // Broadcasts a leave event to the room\n        socket.emit('leave', {\n            \"roomName\": state.roomName,\n            \"user_name\": crypt.encryptMessage(state.username, state.key)\n        });\n    }\n\n    function changeTheme() { // Change app-wide theme\n        if (state.theme === 'light') {\n            themeSetting = 'dark';\n            dispatch({type: 'SET_OTHEME', payload: 'light'})\n            dispatch({type: 'SET_MODAL', payload: '#292929'})\n        } else {\n            themeSetting = 'light';\n            dispatch({type: 'SET_OTHEME', payload: 'dark'})\n            dispatch({type: 'SET_MODAL', payload: '#b3b3b3'})\n        }\n        dispatch({type: 'SET_THEME', payload: themeSetting})\n        document.documentElement.setAttribute('data-theme', themeSetting);\n    }\n\n    // Handlers\n\n    function handleLeave() {\n        broadcastLeave();\n        dispatch({type: 'SET_KEY', payload: null});\n        dispatch({type: 'SET_USERNAME', payload: null});\n        dispatch({type: 'SET_ROOM', payload: null});\n        // location.reload();\n        window.location.reload();\n        history.push('/');\n    }\n\n    function socketEmit(msg) {\n        // Emits message events\n        var encryptedMessage = crypt.encryptMessage(msg, state.key);\n\n        socket.emit('chat event', {\n            \"roomName\": state.roomName,\n            \"user_name\": crypt.encryptMessage(state.username, state.key),\n            \"message\": encryptedMessage,\n            \"hmac\": CryptoJS.HmacSHA256(encryptedMessage, state.key).toString()\n        });\n    }\n\n    function handleSend() {\n        // Handles send button click\n        console.log(\"[Send Button] Clicked.\")\n        if (message === '') {\n            // If the message is empty just stop\n            console.log(\"[Send Button] Message is empty. Returning.\")\n            return;\n        }\n//ENCRYPTION OF FILE\n        if (fileSelected === true) {\n            // If a file is attached:\n            open(); // Open the loading dialog\n            console.log(\"[Send Button] Attachment mode.\");\n\n            // Define the FileReader which is able to read the contents of Blob\n            var reader = new FileReader();\n\n            reader.readAsDataURL(fileObject) // Reader Object, contains base64 data\n\n            reader.onload = function () { // Since it contains the Data URI, we should remove the prefix and keep only Base64 string\n                reader.result.replace(/^data:.+;base64,/, '');\n                var encodedData = retrieveB64FromBlob(reader.result);\n\n                console.log(`[Send Button] Base64 encoded data. Sending ${\n                    fileObject.type\n                }.`)\n\n                var encryptedUsername = crypt.encryptMessage(state.username, state.key);\n                var encryptedName = crypt.encryptMessage(file.name, state.key);\n                var encryptedMIME = crypt.encryptMessage(fileObject.type, state.key);\n                console.log(\"[Send Button] Username, file name and file MIME encrypted.\");\n                var encryptedData = crypt.encryptMessage(encodedData, state.key);\n                var calculatedHMAC = CryptoJS.HmacSHA256(encryptedData.toString(), state.key).toString();\n                console.log(\"[Send Button] File data encrypted. Sending...\")\n\n                var stream = ss.createStream();\n                try {\n                    ss(socket).emit('file event', stream, {\n                        \"roomName\": state.roomName,\n                        \"user_name\": encryptedUsername,\n                        \"name\": encryptedName,\n                        \"type\": encryptedMIME,\n                        \"data\": encryptedData,\n                        \"hmac\": calculatedHMAC\n                    });\n                } catch(err) {\n                    console.log(\"[Send Button] Couldn't send file.\");\n                    close();\n                    return;\n                }\n\n                socket.on('file progress', function (msg) {\n                    if (msg.finished === true) {\n                        console.log(\"[Send Button] Data sent.\");\n                        setMessage('');\n                        setFileSelected(false);\n                        setFile(null);\n                        setFileObject(null);\n                        setMessageIcon('faPaperclip')\n                        setDisabled(false);\n                        close();\n                        socket.off('file progress');\n                    }\n                })\n            };\n            return;\n        }\n        console.log(\"[Send Button] Message mode.\")\n\n        switch(message) {\n            // Checks for commands\n            case '/?':\n            case '/cryptochat':\n            case '/commands':\n            case '/cmds':\n            case '/help':\n                setReceived((messages) => [\n                    ...messages,\n                    <div ref={divRef}>\n                        <p>\n                        <b class=\"systemmsg\">SYSTEM: Only you can see this help message.</b>\n                        <br></br>\n                        <b>CryptoChat Command Help</b>\n                        <br></br>\n                        /theme - Change app theme.\n                        <br></br>\n                        /shrug - Send a shrug emoticon.\n                        <br></br>\n                        /tableflip - Send a table flipping emoticon.\n                        <br></br>\n                        /unflip - Send a table unflipping emoticon.\n                        <br></br>\n                        /leave - Leave the room.</p>\n                    </div>\n                ]);\n                break;\n            case '/quit':\n            case '/bye':\n            case '/exit':\n            case '/leave':\n                broadcastLeave();\n                history.push('/');\n                break;\n            case '/shrug':\n                socketEmit('¯\\\\_(ツ)_/¯');\n                break;\n            case '/tableflip':\n                socketEmit('(╯°□°）╯︵ ┻━┻');\n                break;\n            case '/unflip':\n                socketEmit('┬─┬ ノ( ゜-゜ノ)');\n                break;\n            case '/theme':\n                changeTheme();\n                break;\n            default:\n                socketEmit(message);\n        }\n\n        try {\n            // Scroll down\n            divRef.current.scrollIntoView({behavior: 'smooth'});\n        } catch(err) {\n            return;\n        }\n        setMessage('')\n    }\n\n    function handleMessageKeyDown(e) {\n        // Handle enter presses in the message box\n        if (e.keyCode === 13) {\n            handleSend();\n        }\n    }\n\n    function handleInputChange(event) {\n        // Handle file input change\n        setFileSelected(true);\n        var binaryData = [];\n        binaryData.push(event.target.files[0]);\n\n        try {\n            // Try to set the file object to a blob\n            setFileObject(new Blob(binaryData, {type: event.target.files[0].type}))\n        } catch (err) {\n            setFileSelected(false);\n            setFileObject(null);\n            return;\n        }\n\n        var thisFile = event.target.files[0];\n        setFile(thisFile);\n        const sizeMB = thisFile.size / 1024000; // Calculate the size in MB\n        if (sizeMB > process.env.REACT_APP_SIZE_LIMIT) {\n            // Stop the user if the size of the file is larger than the serverside limit\n            openTL();\n            setFileSelected(false);\n            setFileObject(null);\n            setFile(null);\n            return;\n        }\n\n        setMessage(`Attached: ${\n            thisFile.name\n        } (${\n            sizeMB.toFixed(2)\n        } MB)`);\n        setDisabled(true);\n        setMessageIcon('faTimes');\n    }\n\n    function handleMessageButtonClick(event) {\n        // Handle the attachment icon click\n        console.log(\"[Message Button] Clicked.\")\n        if (messageIcon === 'faPaperclip' && fileSelected === false) {\n            console.log(\"[Message Button] Attachment selection mode.\")\n            hiddenFileInput.current.click();\n        } else if (messageIcon === 'faTimes' && fileSelected === true) {\n            // Clear file if the X button is clicked\n            console.log(\"[Message Button] Attachment removal mode.\")\n            setFileSelected(false);\n            setFile(null);\n            setMessage('');\n            setDisabled(false);\n            setMessageIcon('faPaperclip');\n        }\n    }\n\n    function handleEmojiButtonClick() {\n        if (fileSelected === true) {\n            return;\n        }\n\n        if (showEmojiPicker === true) {\n            setShowEmojiPicker(false);\n            return;\n        }\n        setShowEmojiPicker(true);\n    }\n\n    function startCopy() {\n        // var copyText = document.getElementById(\"myInput\");\n        // copyText.select();\n        // copyText.setSelectionRange(0, 99999);\n\tif (navigator.clipboard && window.isSecureContext)\n\t{\n        \tnavigator.clipboard.writeText(state.key);\n\t\tconsole.log(\"Copied via https version\");\n\t}\n\telse\n\t{\n\t\tconsole.log('navigator.clipboard');\n\t\tvar textArea = document.createElement(\"textarea\");\n\t\ttextArea.value = state.key;\n\t\ttextArea.style.position = \"fixed\";  //avoid scrolling to bottom\n\t\tdocument.body.appendChild(textArea);\n\t\ttextArea.focus();\n\t\ttextArea.select();\n\n\t\ttry {\n\t\tvar successful = document.execCommand('copy');\n\t\tvar msg = successful ? 'successful' : 'unsuccessful';\n\t\tconsole.log(\"copied via http ver\");\n\t\t//toastr.info(msg);\n\t\t} catch (err) {\n\t\ttoastr.warning('Was not possible to copy te text: ', err);\n\t\tconsole.log(err);\n\t\t}\n\n\t\tdocument.body.removeChild(textArea);\n\t\t\n\t}\n        var x = document.getElementById(\"snackbar\");\n        x.className = \"show\";\n        setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 3000);\n        // var tooltip = document.getElementById(\"myTooltip\");\n        // tooltip.innerHTML = \"Copied: \" + \"Room key\";\n    }\n\n\n    // Return\n\n    return (<React.Fragment>\n        <Helmet>\n            <link rel=\"stylesheet\" href=\"/styles/Chat.css\"/>\n        </Helmet>\n        <div class=\"chatbox-parent\" id=\"chatbox-parent\">\n            <div class=\"chatbox-child\">\n                <div class=\"chatbox-header\">\n                    <p class=\"keyname title\" id=\"keyname\" title=\"This key is used to join your CryptoChat room.\">\n                        Room Key: \n                        <p title=\"This key is used to join your CryptoChat room.\" class=\"keyname\">\n                        {\n                            state.key\n                        }\n                        </p>\n                        <p class=\"copyBtn\"><button class=\"copyButton\" title=\"Copy Roomkey\" onClick={startCopy}><span><FontAwesomeIcon icon={faCopy} /></span></button></p>\n                    </p>\n                    <p class=\"icon users\" title=\"Connected Users\"><FontAwesomeIcon icon={faUsers} /> {userCount}</p>\n                    <h1 class=\"chatbox-title\">AATMANIRBHAR-SANCHAR</h1>\n                    <h2 class=\"chatbox-subtitle\">\n                        A stunning encrypted chat webapp.\n                    </h2>\n                </div>\n                <div class=\"chatbox-messages\">\n                    {showEmojiPicker === true && window.innerWidth < 800 &&\n                                <div class=\"emojiPicker\">\n                                    <Picker onEmojiClick={(e, emojiObject) => {setMessage(message.concat(emojiObject.emoji))}}/>\n                                </div>\n                    }\n                    <div class=\"messageviewer-parent\">\n                        <div id=\"messageviewer\" name=\"messageviewer\" class=\"messageviewer\">\n                            <div class=\"messagetxt\" id=\"messagetxt\"> {received}</div>\n                        </div>\n                    </div>\n                    <div class=\"messagebox\">\n                        <div class=\"fields\">\n                            <div class=\"username\">\n                                <button class=\"iconbutton attach\"\n                                    title=\"Attach a file\"\n                                    onClick={handleMessageButtonClick}> {\n                                    messageIcon === 'faPaperclip' && <FontAwesomeIcon icon={faPaperclip}/>\n                                }\n                                    {\n                                    messageIcon === 'faTimes' && <FontAwesomeIcon icon={faTimes}/>\n                                }</button>\n                                <input id=\"msg\" type=\"text\" class=\"message\" placeholder=\"Message\"\n                                    disabled={\n                                        (disabled) ? \"disabled\" : \"\"\n                                    }\n                                    value={message}\n                                    onChange={(e) => {setMessage(e.target.value);}}\n                                    onKeyDown={handleMessageKeyDown}/>\n                                <input type=\"file\" id=\"file-input\" class=\"fileinput\"\n                                    ref={hiddenFileInput}\n                                    onChange={handleInputChange}/>\n                                <button class=\"iconbutton emoji\" title=\"Open Emoji Picker\" onClick={handleEmojiButtonClick}><FontAwesomeIcon icon={faLaugh} /></button>\n                            </div>\n                            {showEmojiPicker === true && window.innerWidth > 800 &&\n                                <div class=\"emojiPicker\">\n                                    <Picker disableAutoFocus=\"true\" native=\"true\" onEmojiClick={(e, emojiObject) => {setMessage(message.concat(emojiObject.emoji))}}/>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div class=\"chatbox-buttons\">\n                    <button class=\"button theme\" id=\"toggler\"\n                        onClick={changeTheme}> {\n                        state.oppositeTheme\n                    }</button>\n                    <button class=\"button send\" id=\"sendbutton\"\n                        onClick={handleSend}>Send</button>\n                    <button class=\"button leave\" id=\"leavebutton\"\n                        onClick={handleLeave}>Leave</button>\n                </div>\n            </div>\n\n        </div>\n        <div id=\"snackbar\">Copied Room Key</div>\n        {fileSelected === true &&\n            <Dialog style={\n                    {\n                        backgroundColor: state.modalColor,\n                        minWidth: \"calc(min(350px,90%))\",\n                        width: \"25%\",\n                        padding: \"2%\",\n                        textAlign: \"center\",\n                        borderRadius: \"10px\"\n                    }\n                }\n                isOpen={showDialog}>\n                <p class=\"icon uploading\"><FontAwesomeIcon icon={faFileExport} /></p>\n                <h1>Uploading File...</h1>\n                <p>Please standby while <b>{file.name}</b> is being End-to-End encrypted.</p>\n            </Dialog>\n        }\n        <Dialog style={\n                {\n                    backgroundColor: state.modalColor,\n                    minWidth: \"calc(min(350px,90%))\",\n                    width: \"25%\",\n                    padding: \"2%\",\n                    textAlign: \"center\",\n                    borderRadius: \"10px\"\n                }\n            }\n            isOpen={showDialogTL}>\n                <h1>File Too Large</h1>\n                <p>The file you selected is larger than the size limit ({process.env.REACT_APP_SIZE_LIMIT} MB) and cannot be uploaded.</p>\n                <div class=\"modalButtons\">\n                <button class=\"button\"\n                                onClick={closeTL}>Ok</button>\n                </div>\n        </Dialog>\n\n    </React.Fragment>)\n}\nexport default Chat;\n"],"sourceRoot":""}